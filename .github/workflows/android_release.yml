name: 'Release'

on:
  workflow_dispatch:

jobs:
  get-version:
    runs-on: ubuntu-latest

    outputs:
      version_code: ${{ steps.extract_version.outputs.version_code }}
      version_name: ${{ steps.extract_version.outputs.version_name }}

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Extract versions from build.gradle'
        id: extract_version
        run: |
          VERSION_CODE=$(grep "versionCode" app/build.gradle.kts | sed 's/[^0-9]*//g')

          VERSION_NAME=$(grep "versionName" app/build.gradle.kts | cut -d '"' -f 2)

          echo "Извлечено: versionCode=${VERSION_CODE}, versionName=${VERSION_NAME}"

          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT

  prepare-changelog:
    runs-on: ubuntu-latest
    needs: get-version

    outputs:
      release_body: ${{ steps.generate_changelog.outputs.body }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Setup Python'
        uses: actions/setup-python@v5

      - name: 'Generate changelog'
        id: generate_changelog
        run: |
          CHANGELOG_BODY=$(python .github/scripts/generate_changelog.py ${{ needs.get-version.outputs.version_code }})
          
          echo 'body<<EOF' >> $GITHUB_OUTPUT
          echo "$CHANGELOG_BODY" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: get-version

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Setup JDK 17'
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 'Setup Gradle'
        uses: gradle/actions/setup-gradle@v4

      - name: 'Grant execution permission to Gradle Wrapper'
        run: chmod +x gradlew

      - name: 'Build release .apk'
        run: ./gradlew assembleRelease

      - name: 'Sign release .apk'
        id: sign_apk
        uses: ilharp/sign-android-release@v2
        with:
          releaseDir: app/build/outputs/apk/release
          signingKey: ${{ secrets.ANDROID_SIGNING_KEY }}
          keyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: 'Rename signed .apk'
        run: |
          SIGNED_APK_FILE=$(find ${{ steps.sign_apk.outputs.signedFile }} -name '*.apk' | head -n 1)
          mv "$SIGNED_APK_FILE" "HomeMedkit.apk"

      - name: 'Upload APK as artifact'
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: HomeMedkit.apk

  create-release:
    runs-on: ubuntu-latest
    needs: [ get-version, prepare-changelog, build ]
    permissions:
      contents: write

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Download .apk artifact'
        uses: actions/download-artifact@v4
        with:
          name: release-apk

      - name: 'Push Tag'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag ${{ needs.get-version.outputs.version_name }}
          
          git push origin ${{ needs.get-version.outputs.version_name }}

      - name: 'Create GitHub release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get-version.outputs.version_name }}
          body: ${{ needs.prepare-changelog.outputs.release_body }}
          files: HomeMedkit.apk